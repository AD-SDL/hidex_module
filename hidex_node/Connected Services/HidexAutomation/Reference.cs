//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//     Runtime Version:4.0.30319.42000
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

namespace HidexModule.HidexAutomation {
    using System.Runtime.Serialization;
    
    
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Runtime.Serialization", "4.0.0.0")]
    [System.Runtime.Serialization.DataContractAttribute(Name="InstrumentState", Namespace="http://schemas.datacontract.org/2004/07/HidexSense.Automation")]
    public enum InstrumentState : int {
        
        [System.Runtime.Serialization.EnumMemberAttribute()]
        Unknown = 0,
        
        [System.Runtime.Serialization.EnumMemberAttribute()]
        Idle = 1,
        
        [System.Runtime.Serialization.EnumMemberAttribute()]
        Busy = 2,
    }
    
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    [System.ServiceModel.ServiceContractAttribute(Namespace="http://AurentiaSolutions/HidexSenseAutomation", ConfigurationName="HidexAutomation.IHidexSenseAutomationService", CallbackContract=typeof(HidexModule.HidexAutomation.IHidexSenseAutomationServiceCallback), SessionMode=System.ServiceModel.SessionMode.Required)]
    public interface IHidexSenseAutomationService {
        
        [System.ServiceModel.OperationContractAttribute(IsInitiating=false, Action="http://AurentiaSolutions/HidexSenseAutomation/IHidexSenseAutomationService/CanRun" +
            "Assay", ReplyAction="http://AurentiaSolutions/HidexSenseAutomation/IHidexSenseAutomationService/CanRun" +
            "AssayResponse")]
        bool CanRunAssay(string templateName);
        
        [System.ServiceModel.OperationContractAttribute(IsInitiating=false, Action="http://AurentiaSolutions/HidexSenseAutomation/IHidexSenseAutomationService/CanRun" +
            "Assay", ReplyAction="http://AurentiaSolutions/HidexSenseAutomation/IHidexSenseAutomationService/CanRun" +
            "AssayResponse")]
        System.Threading.Tasks.Task<bool> CanRunAssayAsync(string templateName);
        
        [System.ServiceModel.OperationContractAttribute(IsInitiating=false, Action="http://AurentiaSolutions/HidexSenseAutomation/IHidexSenseAutomationService/CanRun" +
            "AssayWithSampleData", ReplyAction="http://AurentiaSolutions/HidexSenseAutomation/IHidexSenseAutomationService/CanRun" +
            "AssayWithSampleDataResponse")]
        bool CanRunAssayWithSampleData(string templateName, string sampleDataCsvContent);
        
        [System.ServiceModel.OperationContractAttribute(IsInitiating=false, Action="http://AurentiaSolutions/HidexSenseAutomation/IHidexSenseAutomationService/CanRun" +
            "AssayWithSampleData", ReplyAction="http://AurentiaSolutions/HidexSenseAutomation/IHidexSenseAutomationService/CanRun" +
            "AssayWithSampleDataResponse")]
        System.Threading.Tasks.Task<bool> CanRunAssayWithSampleDataAsync(string templateName, string sampleDataCsvContent);
        
        [System.ServiceModel.OperationContractAttribute(IsInitiating=false, Action="http://AurentiaSolutions/HidexSenseAutomation/IHidexSenseAutomationService/CloseP" +
            "lateCarrier", ReplyAction="http://AurentiaSolutions/HidexSenseAutomation/IHidexSenseAutomationService/CloseP" +
            "lateCarrierResponse")]
        void ClosePlateCarrier();
        
        [System.ServiceModel.OperationContractAttribute(IsInitiating=false, Action="http://AurentiaSolutions/HidexSenseAutomation/IHidexSenseAutomationService/CloseP" +
            "lateCarrier", ReplyAction="http://AurentiaSolutions/HidexSenseAutomation/IHidexSenseAutomationService/CloseP" +
            "lateCarrierResponse")]
        System.Threading.Tasks.Task ClosePlateCarrierAsync();
        
        [System.ServiceModel.OperationContractAttribute(Action="http://AurentiaSolutions/HidexSenseAutomation/IHidexSenseAutomationService/Connec" +
            "t", ReplyAction="http://AurentiaSolutions/HidexSenseAutomation/IHidexSenseAutomationService/Connec" +
            "tResponse")]
        void Connect(bool allowSimulation);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://AurentiaSolutions/HidexSenseAutomation/IHidexSenseAutomationService/Connec" +
            "t", ReplyAction="http://AurentiaSolutions/HidexSenseAutomation/IHidexSenseAutomationService/Connec" +
            "tResponse")]
        System.Threading.Tasks.Task ConnectAsync(bool allowSimulation);
        
        [System.ServiceModel.OperationContractAttribute(IsTerminating=true, IsInitiating=false, Action="http://AurentiaSolutions/HidexSenseAutomation/IHidexSenseAutomationService/Discon" +
            "nect", ReplyAction="http://AurentiaSolutions/HidexSenseAutomation/IHidexSenseAutomationService/Discon" +
            "nectResponse")]
        void Disconnect();
        
        [System.ServiceModel.OperationContractAttribute(IsTerminating=true, IsInitiating=false, Action="http://AurentiaSolutions/HidexSenseAutomation/IHidexSenseAutomationService/Discon" +
            "nect", ReplyAction="http://AurentiaSolutions/HidexSenseAutomation/IHidexSenseAutomationService/Discon" +
            "nectResponse")]
        System.Threading.Tasks.Task DisconnectAsync();
        
        [System.ServiceModel.OperationContractAttribute(IsInitiating=false, Action="http://AurentiaSolutions/HidexSenseAutomation/IHidexSenseAutomationService/GetAss" +
            "ays", ReplyAction="http://AurentiaSolutions/HidexSenseAutomation/IHidexSenseAutomationService/GetAss" +
            "aysResponse")]
        string[] GetAssays();
        
        [System.ServiceModel.OperationContractAttribute(IsInitiating=false, Action="http://AurentiaSolutions/HidexSenseAutomation/IHidexSenseAutomationService/GetAss" +
            "ays", ReplyAction="http://AurentiaSolutions/HidexSenseAutomation/IHidexSenseAutomationService/GetAss" +
            "aysResponse")]
        System.Threading.Tasks.Task<string[]> GetAssaysAsync();
        
        [System.ServiceModel.OperationContractAttribute(IsInitiating=false, Action="http://AurentiaSolutions/HidexSenseAutomation/IHidexSenseAutomationService/GetAut" +
            "oExportPath", ReplyAction="http://AurentiaSolutions/HidexSenseAutomation/IHidexSenseAutomationService/GetAut" +
            "oExportPathResponse")]
        string GetAutoExportPath();
        
        [System.ServiceModel.OperationContractAttribute(IsInitiating=false, Action="http://AurentiaSolutions/HidexSenseAutomation/IHidexSenseAutomationService/GetAut" +
            "oExportPath", ReplyAction="http://AurentiaSolutions/HidexSenseAutomation/IHidexSenseAutomationService/GetAut" +
            "oExportPathResponse")]
        System.Threading.Tasks.Task<string> GetAutoExportPathAsync();
        
        [System.ServiceModel.OperationContractAttribute(IsInitiating=false, Action="http://AurentiaSolutions/HidexSenseAutomation/IHidexSenseAutomationService/GetInt" +
            "erfaceVersion", ReplyAction="http://AurentiaSolutions/HidexSenseAutomation/IHidexSenseAutomationService/GetInt" +
            "erfaceVersionResponse")]
        string GetInterfaceVersion();
        
        [System.ServiceModel.OperationContractAttribute(IsInitiating=false, Action="http://AurentiaSolutions/HidexSenseAutomation/IHidexSenseAutomationService/GetInt" +
            "erfaceVersion", ReplyAction="http://AurentiaSolutions/HidexSenseAutomation/IHidexSenseAutomationService/GetInt" +
            "erfaceVersionResponse")]
        System.Threading.Tasks.Task<string> GetInterfaceVersionAsync();
        
        [System.ServiceModel.OperationContractAttribute(IsInitiating=false, Action="http://AurentiaSolutions/HidexSenseAutomation/IHidexSenseAutomationService/GetSta" +
            "te", ReplyAction="http://AurentiaSolutions/HidexSenseAutomation/IHidexSenseAutomationService/GetSta" +
            "teResponse")]
        HidexModule.HidexAutomation.InstrumentState GetState();
        
        [System.ServiceModel.OperationContractAttribute(IsInitiating=false, Action="http://AurentiaSolutions/HidexSenseAutomation/IHidexSenseAutomationService/GetSta" +
            "te", ReplyAction="http://AurentiaSolutions/HidexSenseAutomation/IHidexSenseAutomationService/GetSta" +
            "teResponse")]
        System.Threading.Tasks.Task<HidexModule.HidexAutomation.InstrumentState> GetStateAsync();
        
        [System.ServiceModel.OperationContractAttribute(IsInitiating=false, Action="http://AurentiaSolutions/HidexSenseAutomation/IHidexSenseAutomationService/OpenPl" +
            "ateCarrier", ReplyAction="http://AurentiaSolutions/HidexSenseAutomation/IHidexSenseAutomationService/OpenPl" +
            "ateCarrierResponse")]
        void OpenPlateCarrier();
        
        [System.ServiceModel.OperationContractAttribute(IsInitiating=false, Action="http://AurentiaSolutions/HidexSenseAutomation/IHidexSenseAutomationService/OpenPl" +
            "ateCarrier", ReplyAction="http://AurentiaSolutions/HidexSenseAutomation/IHidexSenseAutomationService/OpenPl" +
            "ateCarrierResponse")]
        System.Threading.Tasks.Task OpenPlateCarrierAsync();
        
        [System.ServiceModel.OperationContractAttribute(IsInitiating=false, Action="http://AurentiaSolutions/HidexSenseAutomation/IHidexSenseAutomationService/SetAut" +
            "oExportPath", ReplyAction="http://AurentiaSolutions/HidexSenseAutomation/IHidexSenseAutomationService/SetAut" +
            "oExportPathResponse")]
        void SetAutoExportPath(string exportPath);
        
        [System.ServiceModel.OperationContractAttribute(IsInitiating=false, Action="http://AurentiaSolutions/HidexSenseAutomation/IHidexSenseAutomationService/SetAut" +
            "oExportPath", ReplyAction="http://AurentiaSolutions/HidexSenseAutomation/IHidexSenseAutomationService/SetAut" +
            "oExportPathResponse")]
        System.Threading.Tasks.Task SetAutoExportPathAsync(string exportPath);
        
        [System.ServiceModel.OperationContractAttribute(IsInitiating=false, Action="http://AurentiaSolutions/HidexSenseAutomation/IHidexSenseAutomationService/StartA" +
            "ssay", ReplyAction="http://AurentiaSolutions/HidexSenseAutomation/IHidexSenseAutomationService/StartA" +
            "ssayResponse")]
        void StartAssay(string templateName);
        
        [System.ServiceModel.OperationContractAttribute(IsInitiating=false, Action="http://AurentiaSolutions/HidexSenseAutomation/IHidexSenseAutomationService/StartA" +
            "ssay", ReplyAction="http://AurentiaSolutions/HidexSenseAutomation/IHidexSenseAutomationService/StartA" +
            "ssayResponse")]
        System.Threading.Tasks.Task StartAssayAsync(string templateName);
        
        [System.ServiceModel.OperationContractAttribute(IsInitiating=false, Action="http://AurentiaSolutions/HidexSenseAutomation/IHidexSenseAutomationService/StartA" +
            "ssayWithMetadata", ReplyAction="http://AurentiaSolutions/HidexSenseAutomation/IHidexSenseAutomationService/StartA" +
            "ssayWithMetadataResponse")]
        void StartAssayWithMetadata(string templateName, string resultTitle, string resultComment);
        
        [System.ServiceModel.OperationContractAttribute(IsInitiating=false, Action="http://AurentiaSolutions/HidexSenseAutomation/IHidexSenseAutomationService/StartA" +
            "ssayWithMetadata", ReplyAction="http://AurentiaSolutions/HidexSenseAutomation/IHidexSenseAutomationService/StartA" +
            "ssayWithMetadataResponse")]
        System.Threading.Tasks.Task StartAssayWithMetadataAsync(string templateName, string resultTitle, string resultComment);
        
        [System.ServiceModel.OperationContractAttribute(IsInitiating=false, Action="http://AurentiaSolutions/HidexSenseAutomation/IHidexSenseAutomationService/StartA" +
            "ssayWithSampleData", ReplyAction="http://AurentiaSolutions/HidexSenseAutomation/IHidexSenseAutomationService/StartA" +
            "ssayWithSampleDataResponse")]
        void StartAssayWithSampleData(string templateName, string resultTitle, string resultComment, string sampleDataCsvContent);
        
        [System.ServiceModel.OperationContractAttribute(IsInitiating=false, Action="http://AurentiaSolutions/HidexSenseAutomation/IHidexSenseAutomationService/StartA" +
            "ssayWithSampleData", ReplyAction="http://AurentiaSolutions/HidexSenseAutomation/IHidexSenseAutomationService/StartA" +
            "ssayWithSampleDataResponse")]
        System.Threading.Tasks.Task StartAssayWithSampleDataAsync(string templateName, string resultTitle, string resultComment, string sampleDataCsvContent);
        
        [System.ServiceModel.OperationContractAttribute(IsInitiating=false, Action="http://AurentiaSolutions/HidexSenseAutomation/IHidexSenseAutomationService/StopAs" +
            "say", ReplyAction="http://AurentiaSolutions/HidexSenseAutomation/IHidexSenseAutomationService/StopAs" +
            "sayResponse")]
        void StopAssay();
        
        [System.ServiceModel.OperationContractAttribute(IsInitiating=false, Action="http://AurentiaSolutions/HidexSenseAutomation/IHidexSenseAutomationService/StopAs" +
            "say", ReplyAction="http://AurentiaSolutions/HidexSenseAutomation/IHidexSenseAutomationService/StopAs" +
            "sayResponse")]
        System.Threading.Tasks.Task StopAssayAsync();
    }
    
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    public interface IHidexSenseAutomationServiceCallback {
        
        [System.ServiceModel.OperationContractAttribute(IsOneWay=true, Action="http://AurentiaSolutions/HidexSenseAutomation/IHidexSenseAutomationService/OnStat" +
            "eChanged")]
        void OnStateChanged();
    }
    
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    public interface IHidexSenseAutomationServiceChannel : HidexModule.HidexAutomation.IHidexSenseAutomationService, System.ServiceModel.IClientChannel {
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    public partial class HidexSenseAutomationServiceClient : System.ServiceModel.DuplexClientBase<HidexModule.HidexAutomation.IHidexSenseAutomationService>, HidexModule.HidexAutomation.IHidexSenseAutomationService {
        
        public HidexSenseAutomationServiceClient(System.ServiceModel.InstanceContext callbackInstance) : 
                base(callbackInstance) {
        }
        
        public HidexSenseAutomationServiceClient(System.ServiceModel.InstanceContext callbackInstance, string endpointConfigurationName) : 
                base(callbackInstance, endpointConfigurationName) {
        }
        
        public HidexSenseAutomationServiceClient(System.ServiceModel.InstanceContext callbackInstance, string endpointConfigurationName, string remoteAddress) : 
                base(callbackInstance, endpointConfigurationName, remoteAddress) {
        }
        
        public HidexSenseAutomationServiceClient(System.ServiceModel.InstanceContext callbackInstance, string endpointConfigurationName, System.ServiceModel.EndpointAddress remoteAddress) : 
                base(callbackInstance, endpointConfigurationName, remoteAddress) {
        }
        
        public HidexSenseAutomationServiceClient(System.ServiceModel.InstanceContext callbackInstance, System.ServiceModel.Channels.Binding binding, System.ServiceModel.EndpointAddress remoteAddress) : 
                base(callbackInstance, binding, remoteAddress) {
        }
        
        public bool CanRunAssay(string templateName) {
            return base.Channel.CanRunAssay(templateName);
        }
        
        public System.Threading.Tasks.Task<bool> CanRunAssayAsync(string templateName) {
            return base.Channel.CanRunAssayAsync(templateName);
        }
        
        public bool CanRunAssayWithSampleData(string templateName, string sampleDataCsvContent) {
            return base.Channel.CanRunAssayWithSampleData(templateName, sampleDataCsvContent);
        }
        
        public System.Threading.Tasks.Task<bool> CanRunAssayWithSampleDataAsync(string templateName, string sampleDataCsvContent) {
            return base.Channel.CanRunAssayWithSampleDataAsync(templateName, sampleDataCsvContent);
        }
        
        public void ClosePlateCarrier() {
            base.Channel.ClosePlateCarrier();
        }
        
        public System.Threading.Tasks.Task ClosePlateCarrierAsync() {
            return base.Channel.ClosePlateCarrierAsync();
        }
        
        public void Connect(bool allowSimulation) {
            base.Channel.Connect(allowSimulation);
        }
        
        public System.Threading.Tasks.Task ConnectAsync(bool allowSimulation) {
            return base.Channel.ConnectAsync(allowSimulation);
        }
        
        public void Disconnect() {
            base.Channel.Disconnect();
        }
        
        public System.Threading.Tasks.Task DisconnectAsync() {
            return base.Channel.DisconnectAsync();
        }
        
        public string[] GetAssays() {
            return base.Channel.GetAssays();
        }
        
        public System.Threading.Tasks.Task<string[]> GetAssaysAsync() {
            return base.Channel.GetAssaysAsync();
        }
        
        public string GetAutoExportPath() {
            return base.Channel.GetAutoExportPath();
        }
        
        public System.Threading.Tasks.Task<string> GetAutoExportPathAsync() {
            return base.Channel.GetAutoExportPathAsync();
        }
        
        public string GetInterfaceVersion() {
            return base.Channel.GetInterfaceVersion();
        }
        
        public System.Threading.Tasks.Task<string> GetInterfaceVersionAsync() {
            return base.Channel.GetInterfaceVersionAsync();
        }
        
        public HidexModule.HidexAutomation.InstrumentState GetState() {
            return base.Channel.GetState();
        }
        
        public System.Threading.Tasks.Task<HidexModule.HidexAutomation.InstrumentState> GetStateAsync() {
            return base.Channel.GetStateAsync();
        }
        
        public void OpenPlateCarrier() {
            base.Channel.OpenPlateCarrier();
        }
        
        public System.Threading.Tasks.Task OpenPlateCarrierAsync() {
            return base.Channel.OpenPlateCarrierAsync();
        }
        
        public void SetAutoExportPath(string exportPath) {
            base.Channel.SetAutoExportPath(exportPath);
        }
        
        public System.Threading.Tasks.Task SetAutoExportPathAsync(string exportPath) {
            return base.Channel.SetAutoExportPathAsync(exportPath);
        }
        
        public void StartAssay(string templateName) {
            base.Channel.StartAssay(templateName);
        }
        
        public System.Threading.Tasks.Task StartAssayAsync(string templateName) {
            return base.Channel.StartAssayAsync(templateName);
        }
        
        public void StartAssayWithMetadata(string templateName, string resultTitle, string resultComment) {
            base.Channel.StartAssayWithMetadata(templateName, resultTitle, resultComment);
        }
        
        public System.Threading.Tasks.Task StartAssayWithMetadataAsync(string templateName, string resultTitle, string resultComment) {
            return base.Channel.StartAssayWithMetadataAsync(templateName, resultTitle, resultComment);
        }
        
        public void StartAssayWithSampleData(string templateName, string resultTitle, string resultComment, string sampleDataCsvContent) {
            base.Channel.StartAssayWithSampleData(templateName, resultTitle, resultComment, sampleDataCsvContent);
        }
        
        public System.Threading.Tasks.Task StartAssayWithSampleDataAsync(string templateName, string resultTitle, string resultComment, string sampleDataCsvContent) {
            return base.Channel.StartAssayWithSampleDataAsync(templateName, resultTitle, resultComment, sampleDataCsvContent);
        }
        
        public void StopAssay() {
            base.Channel.StopAssay();
        }
        
        public System.Threading.Tasks.Task StopAssayAsync() {
            return base.Channel.StopAssayAsync();
        }
    }
}
